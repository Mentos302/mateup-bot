const dayjs = require('dayjs');

import { Markup } from 'telegraf';
import { UseFilters } from '@nestjs/common';
import { Scene, SceneEnter, Action, On, Ctx, Message } from 'nestjs-telegraf';
import { Context, SceneState } from 'src/interfaces/context.interface';
import { SCENE_SETTINGS } from 'src/common/config/scene';
import { TelegrafExceptionFilter } from 'src/common/filters/telegraf-exception.filter';

const toNextScene = (ctx: Context, date: string) => {
  const { user } = ctx.scene.state as SceneState;

  if (!user.subjects) {
    ctx.reply(
      'üá™üá∑ –í–∞–º —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
    );

    return ctx.scene.leave();
  }

  if (user.subjects.length === 1) {
    return ctx.scene.enter('lesson_student', {
      ...ctx.scene.state,
      date,
      subject: user.subjects[0],
    });
  }

  return ctx.scene.enter('lesson_subject', {
    ...ctx.scene.state,
    date,
  });
};

@Scene('lesson_date', SCENE_SETTINGS)
@UseFilters(TelegrafExceptionFilter)
export class LessonDateScene {
  @SceneEnter()
  onSceneEnter(ctx: Context) {
    const today = dayjs().format('DD.MM.YYYY');
    const yesterday = dayjs().subtract(1, 'day').format('DD.MM.YYYY');

    ctx.replyWithHTML(
      `üìÜ –ù–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É –∑–∞–Ω—è—Ç—Ç—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∑ –ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö:`,
      Markup.inlineKeyboard([
        [
          { text: `–í—á–æ—Ä–∞, ${yesterday}`, callback_data: 'yesterday' },
          { text: `–°—å–æ–≥–æ–¥–Ω—ñ, ${today}`, callback_data: 'today' },
        ],
        [{ text: `‚Ü©Ô∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è `, callback_data: 'back' }],
      ]),
    );
  }

  @Action('yesterday')
  async onYestardayAction(ctx: Context): Promise<void> {
    ctx.answerCbQuery();

    toNextScene(ctx, dayjs().subtract(1, 'day').format('DD.MM.YYYY'));
  }

  @Action('today')
  async onTodayAction(ctx: Context): Promise<void> {
    ctx.answerCbQuery();

    toNextScene(ctx, dayjs().format('DD.MM.YYYY'));
  }

  @On('text')
  async onText(@Ctx() ctx: Context, @Message('text') date: string) {
    let regexFull = /^(\d{2})\.(\d{2})\.(\d{4})$/;
    let regexPartial = /^(\d{2})\.(\d{2})$/;

    if (regexFull.test(date)) {
      const [, day, month, year] = date.match(regexFull);
      this.handleDate(ctx, day, month, year);
    } else if (regexPartial.test(date)) {
      const currentYear = new Date().getFullYear().toString();
      const [, day, month] = date.match(regexPartial);
      this.handleDate(ctx, day, month, currentYear);
    } else {
      ctx.reply(
        '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –∞–±–æ –î–î.–ú–ú',
      );
    }
  }

  private isDateWithinCurrentPeriod(date: Date): boolean {
    const currentDay = new Date().getDate();
    if (currentDay <= 15) {
      return date.getDate() <= 15;
    }
    return date.getDate() > 15;
  }

  handleDate(ctx: Context, day: string, month: string, year: string) {
    const parsedDate = new Date(`${year}-${month}-${day}`);
    if (
      parsedDate &&
      parsedDate.getDate() === parseInt(day, 10) &&
      parsedDate.getMonth() + 1 === parseInt(month, 10) &&
      parsedDate.getFullYear() === parseInt(year, 10)
    ) {
      if (this.isDateWithinCurrentPeriod(parsedDate)) {
        toNextScene(ctx, `${day}.${month}.${year}`);
      } else {
        ctx.reply(
          '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ –º–µ–∂–∞—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É.',
        );
      }
    } else {
      ctx.reply('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.');
    }
  }

  @Action('back')
  async onBack(ctx: Context): Promise<void> {
    ctx.answerCbQuery();

    ctx.replyWithHTML(
      `üö´ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.`,
      Markup.inlineKeyboard([
        {
          text: '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–Ω—è—Ç—Ç—è',
          callback_data: 'rndmsht',
        },
      ]),
    );

    ctx.scene.leave();
  }

  @On('message')
  async onMessage(ctx: Context): Promise<void> {
    ctx.scene.reenter();
  }
}
